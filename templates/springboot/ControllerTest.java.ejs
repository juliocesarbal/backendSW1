package <%= basePackage %>.controller;

import <%= basePackage %>.dto.<%= className %>DTO;
import <%= basePackage %>.service.<%= className %>Service;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(<%= className %>Controller.class)
class <%= className %>ControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private <%= className %>Service <%= varName %>Service;

    @Test
    void testGetAll() throws Exception {
        <%= className %>DTO dto1 = new <%= className %>DTO();
        <%= className %>DTO dto2 = new <%= className %>DTO();

        when(<%= varName %>Service.findAll()).thenReturn(Arrays.asList(dto1, dto2));

        mockMvc.perform(get("/api/<%= pluralName %>"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.length()").value(2));
    }

    @Test
    void testGetById_Found() throws Exception {
        <%= className %>DTO dto = new <%= className %>DTO();
        when(<%= varName %>Service.findById(1L)).thenReturn(Optional.of(dto));

        mockMvc.perform(get("/api/<%= pluralName %>/1"))
                .andExpect(status().isOk());
    }

    @Test
    void testGetById_NotFound() throws Exception {
        when(<%= varName %>Service.findById(999L)).thenReturn(Optional.empty());

        mockMvc.perform(get("/api/<%= pluralName %>/999"))
                .andExpect(status().isNotFound());
    }

    @Test
    void testCreate() throws Exception {
        <%= className %>DTO inputDTO = new <%= className %>DTO();
<% attributes.forEach(function(attr) { %>
<% if (!attr.isId && !attr.isRelation) { %>
        inputDTO.set<%= capitalize(attr.name) %>(<%= attr.sampleValue %>);
<% } %>
<% }); %>

        <%= className %>DTO outputDTO = new <%= className %>DTO();
        when(<%= varName %>Service.save(any(<%= className %>DTO.class))).thenReturn(outputDTO);

        mockMvc.perform(post("/api/<%= pluralName %>")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(inputDTO)))
                .andExpect(status().isCreated());
    }

    @Test
    void testUpdate() throws Exception {
        <%= className %>DTO inputDTO = new <%= className %>DTO();
<% attributes.forEach(function(attr) { %>
<% if (!attr.isId && !attr.isRelation) { %>
        inputDTO.set<%= capitalize(attr.name) %>(<%= attr.sampleValue %>);
<% } %>
<% }); %>

        <%= className %>DTO outputDTO = new <%= className %>DTO();
        when(<%= varName %>Service.update(eq(1L), any(<%= className %>DTO.class))).thenReturn(outputDTO);

        mockMvc.perform(put("/api/<%= pluralName %>/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(inputDTO)))
                .andExpect(status().isOk());
    }

    @Test
    void testDelete() throws Exception {
        mockMvc.perform(delete("/api/<%= pluralName %>/1"))
                .andExpect(status().isNoContent());
    }
}

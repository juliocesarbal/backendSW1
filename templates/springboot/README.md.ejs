# <%= projectName %>

Spring Boot REST API generated from UML diagram.

## 📋 Description

This project was automatically generated from a UML class diagram and provides a complete RESTful API with the following features:

- ✅ JPA Entities with relationships
- ✅ Repository layer (Spring Data JPA)
- ✅ Service layer with business logic
- ✅ REST Controllers with CRUD operations
- ✅ DTOs for request/response
- ✅ Global exception handling
- ✅ Input validation
- ✅ PostgreSQL database
- ✅ Docker support
- ✅ Integration tests

## 🚀 Getting Started

### Prerequisites

- Java 17 or higher
- Maven 3.6+
- Docker & Docker Compose (for database)

### Installation

1. **Clone or extract the project**

2. **Start the database with Docker**

```bash
docker-compose up -d
```

This will start:
- PostgreSQL on port 5432
- pgAdmin on port 5050 (admin@admin.com / admin)

3. **Build the project**

```bash
mvn clean install
```

4. **Run the application**

```bash
mvn spring-boot:run
```

The API will be available at: `http://localhost:8080`

## 📡 API Endpoints

<% classes.forEach(function(cls) { %>
### <%= cls.name %>

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | `/api/<%= cls.pluralName %>` | Get all <%= cls.pluralName %> |
| GET | `/api/<%= cls.pluralName %>/{id}` | Get <%= cls.name %> by ID |
| POST | `/api/<%= cls.pluralName %>` | Create new <%= cls.name %> |
| PUT | `/api/<%= cls.pluralName %>/{id}` | Update <%= cls.name %> |
| DELETE | `/api/<%= cls.pluralName %>/{id}` | Delete <%= cls.name %> |

<% }); %>

## 🧪 Testing

Run all tests:

```bash
mvn test
```

Run specific test class:

```bash
mvn test -Dtest=<ClassName>ControllerTest
```

## 📦 Database

The application uses PostgreSQL. Connection details:

- **Host**: localhost:5432
- **Database**: <%= dbName %>
- **Username**: postgres
- **Password**: postgres

### Access pgAdmin

1. Open http://localhost:5050
2. Login with `admin@admin.com` / `admin`
3. Add server:
   - Host: postgres
   - Port: 5432
   - Database: <%= dbName %>
   - Username: postgres
   - Password: postgres

## 🛠️ Project Structure

```
src/
├── main/
│   ├── java/
│   │   └── <%= basePackage.replace(/\./g, '/') %>/
│   │       ├── entity/          # JPA Entities
│   │       ├── repository/      # Spring Data Repositories
│   │       ├── service/         # Business Logic
│   │       ├── controller/      # REST Controllers
│   │       ├── dto/             # Data Transfer Objects
│   │       └── exception/       # Exception Handlers
│   └── resources/
│       └── application.properties
└── test/
    └── java/                    # Integration Tests
```

## 🔧 Configuration

Edit `src/main/resources/application.properties` to configure:

- Database connection
- Server port
- JPA settings
- Logging levels

## 📝 Example Request

```bash
# Create a new entity
curl -X POST http://localhost:8080/api/<%= classes[0].pluralName %> \
  -H "Content-Type: application/json" \
  -d '{
    <% classes[0].sampleData.forEach(function(field, index) { %>
    "<%= field.key %>": <%= field.value %><% if (index < classes[0].sampleData.length - 1) { %>,<% } %>
    <% }); %>
  }'

# Get all entities
curl http://localhost:8080/api/<%= classes[0].pluralName %>

# Get entity by ID
curl http://localhost:8080/api/<%= classes[0].pluralName %>/1
```

## 🐳 Docker Commands

```bash
# Start services
docker-compose up -d

# Stop services
docker-compose down

# View logs
docker-compose logs -f

# Restart database
docker-compose restart postgres
```

## 📚 Technologies Used

- Spring Boot 3.2.0
- Spring Data JPA
- PostgreSQL
- Lombok
- Jakarta Validation
- Maven

## 📄 License

Generated by UML Code Generator

---

**Generated on**: <%= new Date().toISOString() %>

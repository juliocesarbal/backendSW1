package <%= basePackage %>.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "<%= tableName %>")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class <%= className %> {
<% attributes.forEach(function(attr) { %>
<% if (attr.isId) { %>
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
<% } else if (attr.isRelation) { %>
<% if (attr.relationType === 'MANY_TO_ONE') { %>
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "<%= attr.columnName %>", nullable = <%= attr.nullable %>)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
<% } else if (attr.relationType === 'ONE_TO_MANY') { %>
    @OneToMany(mappedBy = "<%= attr.mappedBy %>", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
<% } else if (attr.relationType === 'MANY_TO_MANY') { %>
    @ManyToMany
    @JoinTable(
        name = "<%= attr.joinTable %>",
        joinColumns = @JoinColumn(name = "<%= attr.joinColumn %>"),
        inverseJoinColumns = @JoinColumn(name = "<%= attr.inverseJoinColumn %>")
    )
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
<% } else if (attr.relationType === 'ONE_TO_ONE') { %>
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "<%= attr.columnName %>", referencedColumnName = "id")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
<% } %>
<% } else { %>
    @Column(name = "<%= attr.columnName %>"<% if (!attr.nullable) { %>, nullable = false<% } %><% if (attr.unique) { %>, unique = true<% } %><% if (attr.length) { %>, length = <%= attr.length %><% } %>)
<% } %>
    private <%= attr.type %> <%= attr.name %>;
<% }); %>
}
